# -*- coding: utf-8 -*-
import csv

import datetime
import os

from io import BytesIO
from whois import whois
from PIL import Image, ImageDraw, ImageFont

from django.conf import settings
from django.core.files.base import ContentFile
from django.core.files.temp import NamedTemporaryFile
from django.contrib import messages
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib.auth.models import Permission

from django.contrib.auth.decorators import (
    login_required,
    permission_required,
)
from django.core import paginator
from django.core.cache import cache
from django.db.models import Q
from django.http import (
    HttpResponse, Http404, JsonResponse
)
from django.shortcuts import render, redirect, get_object_or_404
from django.utils import timezone

from domains.forms import (
    DomainChangeForm,
    DomainFilterForm,
    DomainImportForm,
    DomainAlexaForm,
)
from domains.models import Domain, ActionLog
from domains.utils import to_date, validate_small_date, validate_big_date, \
    formation_data
from users.models import Settings, User
from users.utils import get_notification_list

DATE_NOTIFICATION = timezone.now() + datetime.timedelta(days=30)


def reverse_value(x):
    return False if x else True


def messenger_proxy(request, user, notify_msg, show_msg=''):
    if not show_msg:
        show_msg = '{} уведомлен!'.format(user)

    answer = user.send_notification(notify_msg)
    if answer.get('error'):
        messages.error(request, answer.get('msg'))
    else:
        messages.success(request, show_msg)


def get_notifications(user, domain_name=None):
    """
        return queryset notifications
    """
    if not user.is_staff_or_admin:
        return None

    if user.is_superuser:
        # Показывать экспарящиеся домены
        qs = Domain.objects.filter(
            date_expire__lte=DATE_NOTIFICATION,
            date_expire__gte=timezone.now(),
        )
        s = Settings.objects.filter(
            user=user, user_notification_list__isnull=False
        ).first()

        if s:
            admin_list = get_notification_list(s.user_notification_list)
            admin_list.append(user.pk)

            qs = qs.filter(admin__in=admin_list)
        else:
            # TODO: сделать и для менеджеров также
            qs = qs.filter(admin=user)
        return qs

    if user.is_staff:
        # count unread log-messages
        qs = Domain.objects.filter(
            manager=user,
            actionlog__is_read=False
        )
        if domain_name:
            qs = qs.filter(name=domain_name)
        return qs


@login_required
def domain_list(request, reminders='', my_list=False):
    current_page = 'domain_list'
    data = request.GET.copy()
    form = DomainFilterForm(data=data or None)
    qs = Domain.objects.prefetch_related('admin', 'manager')
    if my_list:
        current_page = 'my_list'

        # Проверить есть ли в настройках список админов
        if request.user.is_superuser:
            s = Settings.objects.filter(
                user=request.user, user_notification_list__isnull=False
            ).first()

            if s:
                admin_list = get_notification_list(s.user_notification_list)
                admin_list.append(request.user.pk)

                qs = qs.filter(admin__in=admin_list)
            else:
                qs = qs.filter(admin=request.user)

        elif request.user.is_staff:
            qs = qs.filter(manager=request.user)

    if reminders == 'admin':
        current_page = 'reminders'
        qs = qs.filter(date_expire__lte=DATE_NOTIFICATION)

    # reminders
    notification = get_notifications(request.user)

    data_filters = dict()

    if request.is_ajax():
        if not form.is_valid():
            return JsonResponse(data={}, status=404)

        # filters
        # domain name
        domain_name = data.get('domain-name')
        if domain_name:
            try:
                domain_name = domain_name.strip()
                qs = qs.filter(name__icontains=domain_name)
                data_filters['domain_name'] = domain_name
            except (IndexError, AttributeError):
                pass

        # company name
        company_name = data.get('company-name')
        if company_name:
            try:
                company_name = company_name.strip()
                qs = qs.filter(company_name__icontains=company_name)
                data_filters['company_name'] = company_name
            except (IndexError, AttributeError):
                pass

        # telephone
        telephone = data.get('telephone')
        if telephone:
            try:
                telephone = telephone.strip()
                qs = qs.filter(
                    Q(telephone__icontains=telephone) |
                    Q(telephone2__icontains=telephone) |
                    Q(telephone3__icontains=telephone)
                )
                data_filters['telephone'] = telephone
            except (IndexError, AttributeError):
                pass

        # managers
        managers = data.getlist('managers')
        if managers:
            # не прикрепленные к менеджерам
            if 'None' in managers:
                managers.remove('None')
                qs = qs.filter(
                    Q(manager__pk__in=managers) | Q(manager__isnull=True)
                )
            else:
                qs = qs.filter(manager__pk__in=managers)
            data_filters['managers'] = User.objects.filter(pk__in=managers)

        # admins
        admins = data.getlist('admins')
        if admins:
            admins = data.getlist('admins')
            assert admins
            if 'None' in admins:
                admins.remove('None')
                qs = qs.filter(
                    Q(admin__pk__in=admins) | Q(admin__isnull=True)
                )
            else:
                qs = qs.filter(admin__pk__in=admins)
            data_filters['admins'] = User.objects.filter(pk__in=admins)

        # date registration
        date_registration_from = to_date(data.get('date_register_from'))
        date_registration_till = to_date(data.get('date_register_till'))
        if validate_small_date(date_registration_from,
                               date_registration_till):
            qs = qs.filter(date_register__gte=date_registration_from)
            data_filters['date_registration_from'] = date_registration_from

        if validate_big_date(date_registration_from,
                             date_registration_till) or date_registration_till:
            qs = qs.filter(date_register__lte=date_registration_till)
            data_filters['date_registration_till'] = date_registration_till

        # date request
        date_reguest = to_date(data.get('date_request'))
        if date_reguest:
            qs = qs.filter(date_register=date_reguest)

        # date expiration
        date_expire_from = to_date(data.get('date_expire_from'))
        date_expire_till = to_date(data.get('date_expire_till'))
        if validate_small_date(date_expire_from,
                               date_expire_till):
            qs = qs.filter(date_expire__gte=date_expire_from)
            data_filters['date_expire_from'] = date_expire_from

        if validate_big_date(date_expire_from,
                             date_expire_till) or date_expire_till:
            qs = qs.filter(date_expire__lte=date_expire_till)
            data_filters['date_expire_till'] = date_expire_till

        # pci scan
        pci_scan = data.get('pci_scan')
        if pci_scan in ('0', '1'):
            pci_scan = int(pci_scan)
            if pci_scan == 1:
                qs = qs.filter(date_last_scan__isnull=False)
            if pci_scan == 0:
                qs = qs.filter(date_last_scan__isnull=True)
            data_filters['checks_pci'] = dict(
                DomainFilterForm.NULL_CHOICES)[pci_scan]

        # status
        status = data.get('status')
        if status in dict(Domain.CHOICE_STATUS).keys():
            qs = qs.filter(status=status)
            data_filters['status'] = status

        # status
        alexa_status = data.get('alexa_status')
        if alexa_status in dict(Domain.ALEXA_STATUSES).keys():
            qs = qs.filter(alexa=alexa_status)
            data_filters['alexa_status'] = alexa_status

        domains_paginator = paginator.Paginator(qs, 50)

        try:
            page = int(data.get('page', '1'))
        except ValueError:
            page = 1

        try:
            domains = domains_paginator.page(page)
        except (paginator.EmptyPage, paginator.InvalidPage):
            domains = domains_paginator.page(domains_paginator.num_pages)

        return render(request, 'domains/inc/table.html', {
            'domain_list': domains,
            'data_filters': data_filters,
            'notification': notification,
            'form': form,
        })

    domains_paginator = paginator.Paginator(qs, 50)

    try:
        page = int(data.get('page', '1'))
    except ValueError:
        page = 1

    try:
        domains = domains_paginator.page(page)
    except (paginator.EmptyPage, paginator.InvalidPage):
        domains = domains_paginator.page(domains_paginator.num_pages)

    return render(request, 'domains/domain_list.html', {
        'domain_list': domains,
        'object_list': domains,
        'page_obj': domains,
        'form': form,
        'notification': notification,
        'current_page': current_page
    })


@staff_member_required
def domain_detail(request, pk):
    domain = get_object_or_404(Domain, pk=pk)
    data = request.POST.copy()
    perm = Permission.objects.get(codename='can_manage_domain_registrar')

    admin_registrar = [
        x.username for x in User.objects.filter(
            groups__permissions=perm
        ).distinct()
    ]
    perm = Permission.objects.get(codename='can_edit_site')
    admin_editors = [
        x.username for x in User.objects.filter(
            groups__permissions=perm
        ).distinct()
    ]

    traffic_qs = domain.alexa_traffic.all()

    initiator = None
    executors = [x.executor for x in traffic_qs if x]
    if domain.alexa != Domain.ALEXA_OFF:
        initiator = traffic_qs.first().initiator

    form = DomainAlexaForm(
        data=data or None,
        instance=domain,
        user=request.user,
        initiator=initiator,
        user_executors=executors
    )

    perm = request.user.has_perm('users.can_manage_alexa_traffic')

    if form.has_changed() and form.is_valid() and perm:
        domain = form.save()
        cancel = form.cleaned_data.get('cancel')

        notify_msg = 'Alexa status - {}, domain - {}, comment - {}'

        # Cancel
        if domain.alexa == Domain.ALEXA_OFF and cancel:
            qs = domain.alexa_traffic.filter(initiator=request.user)
            for traffic in qs:
                notify_msg = 'Cancel Alexa! Domain - {}'.format(domain.name)
                show_msg = 'Отмена успешно! {} уведомлен!'.format(
                    traffic.executor
                )
                messenger_proxy(
                    request, traffic.executor, notify_msg, show_msg)
                traffic.delete()
            return redirect('domain-detail', pk)

        # 1/3 ALEXA_OFF => ALEXA_REQUIRES_ON, ALEXA_REQUIRES_OFF
        # задать инициатора, отправить уведомления исполнителям
        if domain.alexa in (
                Domain.ALEXA_REQUIRES_ON, Domain.ALEXA_REQUIRES_OFF):

            notify_msg = notify_msg.format(
                domain.alexa, domain.name, domain.alexa_comment
            )

            if domain.alexa == Domain.ALEXA_REQUIRES_ON:
                executors = form.cleaned_data.get('executors')

            for executor in executors:
                # задать исполнителей
                if domain.alexa == Domain.ALEXA_REQUIRES_ON:
                    domain.alexa_traffic.create(
                        initiator=request.user, executor=executor
                    )

                msg = '{} уведомлен!'.format(executor)
                messenger_proxy(request, executor, notify_msg, msg)

        # 2/4 ALEXA_REQUIRES_ON => (ALEXA_ON, ALEXA_OFF)
        if domain.alexa in (Domain.ALEXA_ON, Domain.ALEXA_OFF):
            notify_msg = notify_msg.format(
                domain.alexa, domain.name, domain.alexa_comment
            )
            msg = '{} уведомлен!'.format(initiator)
            messenger_proxy(request, initiator, notify_msg, msg)
            if domain.alexa == Domain.ALEXA_OFF:
                domain.alexa_traffic.filter(initiator=initiator).delete()

        return redirect('domain-detail', pk)

    return render(request, 'domains/domain_detail.html', {
        'domain': domain,
        'form': form,
        'initiator': initiator,
        'executors': executors,
        'current_page': 'domain_detail',
        'admin_registrar': admin_registrar,
        'admin_editors': admin_editors,
    })


def create_image(text, font_size=None, font_color=None, back_color=None):
    default_font_color = (0, 0, 0)
    default_back_color = (255, 255, 255)

    font_size = font_size or 14
    f_color = font_color if font_color else default_font_color
    b_color = back_color if back_color else default_back_color

    print(f_color, b_color)

    texts = text.split('\n')
    count_line = len(texts)
    text = ''
    max_long_string = ''

    # удалить пробелы, выяснить самую длинную строку
    for s in texts:
        s = s.strip()
        text += '{}\n'.format(s)
        if len(s) > len(max_long_string):
            max_long_string = s

    font = os.path.join(settings.FONT_DIR, 'arial.ttf')

    fnt = ImageFont.truetype(font, font_size)
    x = fnt.getsize(text=max_long_string)[0] + 15  # отступ слева и справа
    y = fnt.getsize(text=text)[1] * count_line

    img = Image.new("RGB", (x, y), color=b_color)

    d = ImageDraw.Draw(img)
    d.text(xy=(10, 10), text=text, fill=f_color, font=fnt)

    buffer = BytesIO()
    img.save(fp=buffer, format='PNG')
    return ContentFile(buffer.getvalue())


@staff_member_required
def domain_to_image(request, pk):
    domain = get_object_or_404(Domain, pk=pk)

    context = {
        'domain': domain,
        'font_size': 14,
        'font_color_value': request.POST.get('font_color'),
        'back_color_value': request.POST.get('back_color'),

    }

    if request.method == 'POST':
        # clear tmp
        for filename in os.listdir(settings.TMP_DIR):
            if filename.endswith('.png'):
                os.unlink(os.path.join(settings.TMP_DIR, filename))

        # Get font_size
        try:
            context['font_size'] = int(request.POST.get('font_size', 0)) or None
        except (ValueError, TypeError):
            messages.error(request, 'Неправильное значение font_size')

        # Get font and back colors
        for c in ('font', 'back'):
            c = '{}_color'.format(c)
            value = request.POST[c]
            if not value:
                continue

            value = value.lstrip('#')
            # преобразовать hex to int
            try:
                context[c] = tuple(int(value[i:i + 2], 16) for i in (0, 2, 4))
            except ValueError:
                messages.error(request, 'Неправильное значение {}'.format(c))

        # Make image
        for field in ('text_company', 'text_contacts'):
            text = request.POST.get(field)
            if not text:
                continue

            img = create_image(
                text=text,
                font_size=context['font_size'],
                font_color=context.get('font_color'),
                back_color=context.get('back_color'),
            )
            temp = NamedTemporaryFile(
                dir=os.path.join(settings.TMP_DIR),
                delete=False,
                suffix='.png'
            )
            temp.write(img.read())
            temp.flush()
            temp.close()

            k = field.replace('text', 'img')
            context.update({
                k: 'tmp/{}'.format(temp.name.split('/')[-1])
            })

    return render(request, 'domains/info_to_image.html', context)


@staff_member_required
def domain_add_edit(request, pk=None):
    domain = None
    editor_admin_list = []
    redirect_admin_list = []
    whois_admin_list = []

    if pk:
        domain = get_object_or_404(Domain, pk=pk)
        qs = domain.confirm_up_set.filter(done=False)

        # Показать кому отправлены запросы на изменение редиректа
        redirect_qs = qs.filter(new_data__contains='redirect')
        redirect_admin_list = set([x.responsible_admin for x in redirect_qs])

        # Показать кому отправлены запросы редактирование сайта
        editor_qs = qs.filter(new_data__contains='editor_method')
        editor_admin_list = set([x.responsible_admin for x in editor_qs])

        # Показать кому отправлены запросы на изменение whois-ов
        whois_qs = qs.filter(new_data__contains='whois')
        whois_admin_list = set([x.responsible_admin for x in whois_qs])

    data = request.POST.copy()
    form = DomainChangeForm(
        data=data or None,
        user=request.user,
        instance=domain,
        allow_change_name=request.user.is_superuser,
    )

    if form.is_valid() and form.has_changed():
        domain = form.save()

    if request.method == 'POST' and form.is_valid():
        # Send notify to new manager

        old_manager = User.objects.filter(
            pk=form.initial.get('manager')  # if create None
        ).first()
        new_manager = form.cleaned_data.get('manager')
        if old_manager != new_manager and new_manager != request.user:
            notify_msg = '{user} назначил вас менеджером {domain}'.format(
                user=request.user, domain=domain.name,
            )

            messenger_proxy(request, new_manager, notify_msg)

        # Send notify to admins - change status
        notify_admin_registrar = form.cleaned_data.get('notify_admin_registrar')
        if notify_admin_registrar:
            admin_registrar = form.cleaned_data.get('admin_registrar')

            for admin in admin_registrar:
                for field in ('redirect', 'status', 'redirect_phone'):
                    if field not in form.changed_data:
                        continue

                confirm_up, created = domain.confirm_up_set.get_or_create(
                    user_changed=request.user,
                    responsible_admin=admin,
                    done=False
                )
                init_value = form.initial.get(field) or '-'
                new_value = getattr(domain, field, '-') or '-'

                confirm_up.old_data = {field: init_value}
                confirm_up.new_data = {field: new_value}
                confirm_up.save()

                notify_msg = '{domain}, {user} просит изменить {field} ' \
                             'с {old} на {new}'
                notify_msg = notify_msg.format(
                    domain=domain.name, user=request.user, field=field,
                    old=init_value, new=new_value
                )

                messenger_proxy(request, admin, notify_msg)

        # Send notify to admins - change redirect
        notify_admin_whois = form.cleaned_data.get('notify_admin_whois')
        if notify_admin_whois:
            admins_whois = form.cleaned_data.get('admin_whois')

            for admin in admins_whois:
                confirm_up, created = domain.confirm_up_set.get_or_create(
                    user_changed=request.user,
                    responsible_admin=admin,
                    done=False
                )

                notify_msg = '{}, {} просит изменить whois -\n'.format(
                    domain.name, request.user
                )

                old_data, new_data, notify_msg = formation_data(
                    form.initial, form.cleaned_data, notify_msg
                )

                new_data['whois'] = 'yes'

                confirm_up.old_data = old_data
                confirm_up.new_data = new_data
                confirm_up.save()

                messenger_proxy(request, admin, notify_msg)

        # Send notify to editors - change information
        notify_admin_editor = form.cleaned_data.get('notify_admin_editor')
        if notify_admin_editor:
            admin_editor = form.cleaned_data.get('admin_editor')

            for admin in admin_editor:
                confirm_up, created = domain.confirm_up_set.get_or_create(
                    user_changed=request.user,
                    responsible_admin=admin,
                    done=False
                )

                notify_msg = '\n{}, {} просит изменить инфу'.format(
                    domain.name, request.user
                )

                old_data, new_data, notify_msg = formation_data(
                    form.initial, form.cleaned_data, notify_msg
                )

                editor_method = form.cleaned_data['editor_method']
                notify_msg += ' {}'.format(editor_method)
                new_data['editor_method'] = editor_method

                confirm_up.old_data = old_data
                confirm_up.new_data = new_data
                confirm_up.save()

                messenger_proxy(request, admin, notify_msg)

        return redirect('domain-detail', pk=domain.pk)

    return render(request, 'domains/domain_add_edit.html', {
        'form': form,
        'domain': domain,
        'editor_admin_list': editor_admin_list,
        'redirect_admin_list': redirect_admin_list,
        'whois_admin_list': whois_admin_list,
        'current_page': 'domain_add' if not pk else ''
    })


@staff_member_required
def domain_logs(request, pk):
    domain = get_object_or_404(Domain, pk=pk)
    actions = domain.actionlog_set.all().prefetch_related('user')
    reader = False
    if request.user == domain.manager:
        reader = True

    read = request.GET.get('read')
    if read:
        if read == 'all':
            actions.filter(is_read=False).update(is_read=True)
        else:
            try:
                read = int(read)
                action = actions.get(pk=read)
                action.is_read = True
                action.save()
            except (ValueError, ActionLog.DoesNotExist):
                pass
        messages.success(request, 'Cчетчики обновятся немного позже')

    return render(request, 'domains/domain_log_list.html', {
        'actions': actions,
        'domain': domain,
        'reader': reader
    })


@permission_required('is_superuser')
def change_user_status(request):
    if request.is_ajax():
        pk = request.GET.get('id')
        name = request.GET.get('name')
        try:
            assert pk
            hasattr(Domain, name)
            user = Domain.objects.get(pk=pk)
        except (AssertionError, Domain.DoesNotExist):
            return JsonResponse({}, status=404)

        if user == request.user and name not in ('is_staff',):  # allowed change
            return JsonResponse({}, status=200)

        if name == 'is_active':
            user.is_active = reverse_value(user.is_active)
        if name == 'is_staff':
            user.is_staff = reverse_value(user.is_staff)
        if name == 'is_superuser':
            user.is_superuser = reverse_value(user.is_superuser)
        user.save()
        return JsonResponse({}, status=200)
    raise Http404


@staff_member_required
def domain_delete(request, pk):
    if request.is_ajax():
        try:
            Domain.objects.get(pk=pk).delete()
            ActionLog.objects.create(
                action=ActionLog.DELETE_DOMAIN,
                user=request.user,
            )
        except Domain.DoesNotExist:
            return JsonResponse({}, status=404)
        return JsonResponse({}, status=200)
    raise Http404("Ajax only")


@login_required
def search_domain_name(request):
    if request.is_ajax():
        query = request.GET.get('term', '').strip()
        data = list()
        if len(query) >= 3:
            queryset = Domain.objects.filter(
                name__icontains=query
            )
            for domain in queryset[:10]:
                data.append({
                    'id': domain.pk,
                    'name': domain.name,
                })
        return JsonResponse(data=data, safe=False)
    raise Http404


@login_required
def search_company_name(request):
    if request.is_ajax():
        query = request.GET.get('term', '').strip()
        data = list()
        if len(query) >= 3:
            queryset = Domain.objects.filter(
                company_name__icontains=query
            )
            for domain in queryset[:10]:
                data.append({
                    'id': domain.pk,
                    'name': domain.company_name,
                })
        return JsonResponse(data=data, safe=False)

    raise Http404


@login_required
def search_telephone(request):
    if request.is_ajax():
        query = request.GET.get('term', '').strip()
        data = list()
        if len(query) >= 3:
            queryset = Domain.objects.filter(
                Q(telephone__icontains=query) |
                Q(telephone2__icontains=query) |
                Q(telephone3__icontains=query)
            )
            for domain in queryset[:10]:
                telephone = domain.telephone
                if domain.telephone2:
                    if query in domain.telephone2:
                        telephone = domain.telephone2

                if domain.telephone3:
                    if query in domain.telephone3:
                        telephone = domain.telephone3

                data.append({
                    'id': domain.pk,
                    'name': telephone,
                })
        return JsonResponse(data=data, safe=False)

    raise Http404


@login_required
def reminders_proxy(request):
    if request.user.is_superuser:
        return redirect('reminders-admin')
    if request.user.is_staff:
        return redirect('reminders-staff')


@staff_member_required
def import_domains(request):
    if request.method == 'POST':
        form = DomainImportForm(request.POST.copy(), request.FILES)
        if form.is_valid():
            for row in request.FILES['import_file'].chunks():
                data = "".join(chr(x) for x in row)
                data_list = data.split(';\n')
                for domain_name in data_list:
                    if len(domain_name) < 254:
                        Domain.objects.get_or_create(
                            name=domain_name
                        )
            return redirect('domain-list')
    else:
        form = DomainImportForm()
    return render(request, 'domains/domain_import.html', {
        'form': form,
        'current_page': 'import_domains'
    })


@staff_member_required
def export_domains(request):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="domain_list.csv"'

    writer = csv.writer(response)

    for domain in Domain.objects.all():
        row = [
            domain.pk, domain.name, domain.company_name, domain.company_address,
            domain.telephone, domain.telephone2, domain.telephone3,
            domain.date_register, domain.date_expire, domain.date_last_scan,
            domain.created_at, domain.updated_at, domain.pci_scan,
            domain.pci_scan_name, domain.status, domain.admin,
            domain.manager,
        ]
        writer.writerow(row)

    return response


@staff_member_required
def reminders_staff(request):
    qs = ActionLog.objects.filter(
        domain__manager=request.user,
    )
    read = request.GET.get('read')
    if read:
        if read == 'all':
            qs.filter(is_read=False).update(is_read=True)
        else:
            try:
                read = int(read)
                action = qs.get(pk=read)
                action.is_read = True
                action.save()
            except (ValueError, ActionLog.DoesNotExist):
                pass

    return render(request, 'domains/domain_log_list.html', {
        'actions': qs,
    })


@login_required
def get_whois(request):
    if request.is_ajax():
        domain_name = request.GET.get('domain_name')
        try:
            assert domain_name
        except AssertionError:
            return JsonResponse({}, status=404)

        data = dict()
        try:
            w = whois(domain_name)
        except Exception as e:
            return JsonResponse({'error': e}, status=500)

        def get_datetime(extract_key):
            try:
                extract_date = w.get(extract_key)
                assert extract_date

                return datetime.datetime.strftime(
                    extract_date, '%Y-%m-%d')
            except (AssertionError, TypeError):
                return None

        for key in ('creation_date', 'expiration_date'):
            data[key] = get_datetime(key)
        return JsonResponse(data, safe=False)
    raise Http404


@login_required
def notifications(request):
    if request.is_ajax():
        name = request.GET.get('name')
        if name:
            # если для конкретного домена
            cache_key = 'notification_{}'.format(name)
        else:
            # если для всех
            cache_key = 'notification_{pk}'.format(pk=request.user.pk)

        notification_count = cache.get(cache_key)
        if not notification_count:
            notification_count = get_notifications(request.user, name).count()
            # проверять раз в пять минут
            cache.set(cache_key, notification_count, 60*5)
        return JsonResponse({"count": notification_count}, safe=False)
    raise Http404


@staff_member_required
def domain_exists(request):
    if not request.is_ajax():
        raise Http404

    exists = False
    domain_name = request.GET.get('domain_name')
    if domain_name:
        exists = Domain.objects.filter(name=domain_name).exists()

    return JsonResponse({"exists": exists}, safe=False)
